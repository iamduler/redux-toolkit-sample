import { addPost, cancelEditingPost, updatePost } from 'pages/blog/blog.slice';
import { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { RootState, useAppDispatch } from 'store';
import { Post } from 'types/blog.type';

const initialState: Post = {
  id: '',
  title: '',
  description: '',
  publishDate: '',
  featuredImage: '',
  published: false,
};

interface ErrorForm {
  publishDate: string;
}

export default function CreatePost() {
  const [formData, setFormData] = useState<Post>(initialState);
  const [errorForm, setErrorForm] = useState<ErrorForm | null>(null);

  // Get the editing post from the store -> useSelector
  const editingPost = useSelector((state: RootState) => state.blog.editingPost)
  const loading = useSelector((state: RootState) => state.blog.loading)

  const dispatch = useAppDispatch();
  
  // If there is an editing post, set the form data to the editing post
  useEffect(() => {
    setFormData(editingPost || initialState);
  }, [editingPost]); // Run when editingPost changes

  // Handle submit
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>)=> {
    e.preventDefault();

    if (editingPost) {
      // Handle update
      dispatch(updatePost({
        postId: editingPost.id,
        body: formData
      }))
      // Unwrap the promise -> wait for the promise to be resolved
      .unwrap().then((res) => {
        setFormData(initialState);
        errorForm && setErrorForm(null);
      }).catch((error) => {
        setErrorForm(error.error);
      });
    } 
    else {
      const { id, ...postWithoutId } = formData;
      dispatch(addPost(postWithoutId)); // Not need to pass id because it will be generated by nanoid
    }
  };

  // Handle cancel
  const handleCancelEditingPost = () => {
    dispatch(cancelEditingPost());
  };
  
  return (
    <form className='bg-white p-8 rounded-lg shadow-md' onSubmit={handleSubmit} onReset={handleCancelEditingPost}>
      <div className='mb-6'>
        <label htmlFor='title' className='block mb-2 text-sm font-medium text-gray-900'>
          Title
        </label>
        <input
          type='text'
          id='title'
          className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
          placeholder='Title'
          required
          value={formData.title}
          onChange={(event) => setFormData((prev) => ({...prev, title: event.target.value}))}
        />
      </div>
      <div className='mb-6'>
        <label htmlFor='featuredImage' className='block mb-2 text-sm font-medium text-gray-900'>
          Featured Image
        </label>
        <input
          type='text'
          id='featuredImage'
          className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
          placeholder='Url image'
          required
          value={formData.featuredImage}
          onChange={(event) => setFormData((prev) => ({...prev, featuredImage: event.target.value}))}
        />
      </div>
      <div className='mb-6'>
        <label htmlFor='description' className='block mb-2 text-sm font-medium text-gray-900'>
          Description
        </label>
        <textarea
          id='description'
          className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'
          placeholder='Description'
          required
          value={formData.description}
          onChange={(event) => setFormData((prev) => ({...prev, description: event.target.value}))}
        />
      </div>
      <div className='mb-6'>
        <label htmlFor='publishDate' className={`block mb-2 text-sm font-medium ${errorForm?.publishDate ? 'border-red-500' : 'border-gray-900'}`}>
          Publish Date
        </label>
        <input
          type='date'
          id='publishDate'
          className={`bg-gray-50 border text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-50 ${errorForm?.publishDate ? 'border-red-500' : 'border-gray-300'}`}	
          required
          value={formData.publishDate}
          onChange={(event) => setFormData((prev) => ({...prev, publishDate: event.target.value}))}
        />
        {errorForm?.publishDate && (
          <p className='text-red-500 text-sm'>{errorForm.publishDate}</p>
        )}
      </div>
      <div className='mb-6'>
        <div className='flex items-center mb-2'>
          <input
            type='checkbox'
            id='publish'
            className='w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600'
            required
            checked={formData.published}
            onChange={(event) => setFormData((prev) => ({...prev, published: event.target.checked}))}
          />
          <label htmlFor='publish' className='ml-2 text-sm font-medium'>
            Publish
          </label>
        </div>
      </div>
      {/* Publish Post */}
      {!editingPost && (
        <button
          type='submit'
          className='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 mr-2'
        >
          Publish Post
        </button>
      )}

      {/* Update Post */}
      {editingPost && (
        <>
          <button
            type='submit'
            className='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 mr-2'
          >
            Update Post
          </button>
          <button
            type='reset'
            className='text-white bg-orange-700 hover:bg-orange-800 focus:ring-4 focus:outline-none focus:ring-orange-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-orange-600 dark:hover:bg-orange-700 dark:focus:ring-orange-800 mr-2'
          >
            Cancel
          </button>
        </>
      )}
    </form>
  );
}
